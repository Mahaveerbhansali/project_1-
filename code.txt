import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder
from sklearn.decomposition import PCA
from google.colab import files

# Upload the dataset (use this in Google Colab)
uploaded = files.upload()

# Load dataset (replace with the uploaded file name)
data = pd.read_csv(list(uploaded.keys())[0])

# Drop unnecessary columns if they exist
data_cleaned = data.drop(columns=['Disease.1', 'Unnamed: 134'], errors='ignore')

# Check for missing values and drop rows with any missing data
data_cleaned = data_cleaned.dropna()

# Separate features (symptoms) and target (disease)
X = data_cleaned.drop('Disease', axis=1)
y = data_cleaned['Disease']

# Encode the target variable (disease names to numeric values)
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Apply PCA to reduce dimensionality (reduce to 30 components)
pca = PCA(n_components=30)
X_pca = pca.fit_transform(X)

# Split data into training and testing sets (80% training, 20% testing)
X_train, X_test, y_train, y_test = train_test_split(X_pca, y_encoded, test_size=0.5, random_state=42)

# Initialize and train the RandomForest model with specific hyperparameters
model = RandomForestClassifier(
    n_estimators=60,      # Moderate number of trees
    max_depth=8,          # Moderate tree depth
    max_features='sqrt',  # Limit the number of features considered for each split
    min_samples_split=4,  # Minimum samples to split an internal node
    min_samples_leaf=2,   # Minimum samples at a leaf node
    random_state=42
)
model.fit(X_train, y_train)

# Function to make predictions based on user input
def predict_symptoms(model, label_encoder):
    # Get the feature names
    feature_names = data_cleaned.columns[:-1]  # Exclude 'Disease' column
    symptoms_input = []

    print("Please enter symptoms (1 for Yes, 0 for No):")
    for symptom in feature_names:
        while True:
            try:
                user_input = int(input(f"{symptom} (1/0): "))
                if user_input in [0, 1]:
                    symptoms_input.append(user_input)
                    break
                else:
                    print("Invalid input. Please enter 1 for Yes or 0 for No.")
            except ValueError:
                print("Invalid input. Please enter 1 for Yes or 0 for No.")

    # Convert input into a DataFrame for prediction
    symptoms_df = pd.DataFrame([symptoms_input], columns=feature_names)

    # Apply PCA transformation to the input
    symptoms_pca = pca.transform(symptoms_df)

    # Make a prediction
    prediction = model.predict(symptoms_pca)
    predicted_disease = label_encoder.inverse_transform(prediction)

    print(f"Predicted Disease: {predicted_disease[0]}")

# Call the prediction function
predict_symptoms(model, label_encoder)
